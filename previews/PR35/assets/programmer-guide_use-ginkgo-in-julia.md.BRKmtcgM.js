import{_ as a,c as s,o as e,aA as n}from"./chunks/framework.CpviZE8M.js";const t="/previews/PR35/assets/cpp2julia_workflow.KhJZ5Bny.jpg",g=JSON.parse('{"title":"Use Ginkgo in Julia","description":"","frontmatter":{},"headers":[],"relativePath":"programmer-guide/use-ginkgo-in-julia.md","filePath":"programmer-guide/use-ginkgo-in-julia.md","lastUpdated":null}'),l={name:"programmer-guide/use-ginkgo-in-julia.md"};function h(r,i,o,p,d,c){return e(),s("div",null,[...i[0]||(i[0]=[n('<h1 id="Use-Ginkgo-in-Julia" tabindex="-1">Use Ginkgo in Julia <a class="header-anchor" href="#Use-Ginkgo-in-Julia" aria-label="Permalink to &quot;Use Ginkgo in Julia {#Use-Ginkgo-in-Julia}&quot;">​</a></h1><p>How can we use a C++ library in our Julia code? In order to do this, we need to firstly create header file(s) that contain(s) C API. Then we can use <a href="https://github.com/JuliaInterop/Clang.jl" target="_blank" rel="noreferrer">Clang.jl</a> to generate low-level API from it. The remaining step would be to properly wrap these low-level API methods using a higher-level API, such that users in Julia community can use our newly created Julia wrapper package as if it was a native package. Following is a workflow diagram that illustrates the whole process.</p><p><img src="'+t+`" alt=""></p><p>In order to illustrate this workflow, we wrapped a C++ library called simpson that implements a Simpson integration scheme into a Julia package called <a href="https://github.com/youwuyou/Simpson.jl" target="_blank" rel="noreferrer">Simpson.jl</a>. A short tutorial is provided in the <code>README</code> file.</p><h2 id="Understanding-how-Julia-functions-are-involved" tabindex="-1">Understanding how Julia functions are involved <a class="header-anchor" href="#Understanding-how-Julia-functions-are-involved" aria-label="Permalink to &quot;Understanding how Julia functions are involved {#Understanding-how-Julia-functions-are-involved}&quot;">​</a></h2><p>We consider a function <code>integrate()</code> that performs numerical integration in our C++ library. Within the header file that contains the C API, the function declaration lies within braces of the <a href="https://en.cppreference.com/w/cpp/language/language_linkage" target="_blank" rel="noreferrer">language linkage</a> specified with an <code>extern &quot;C&quot;</code> keyword. The use of this keyword disables name mangling for specified functions in C++, such that the client linker will be able to link using the C name as how you specified within the code.</p><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> integrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                 const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                 const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                 double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// other methods...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="1.-Analyzing-Compiled-C-Shared-Libraries" tabindex="-1">1. Analyzing Compiled C++ Shared Libraries <a class="header-anchor" href="#1.-Analyzing-Compiled-C-Shared-Libraries" aria-label="Permalink to &quot;1. Analyzing Compiled C++ Shared Libraries {#1.-Analyzing-Compiled-C-Shared-Libraries}&quot;">​</a></h3><p>Let us suppose we have already compiled and linked our code into a shared library called <code>libname.so</code>. It is now essential to understand what information does the compiled shared library provides. An important tool is <code>nm</code> for displaying symbol table of an object, library or executable files. Using the following command <code>nm -D libname.so</code>, we would be able to have a peek into the shared library even without access to the source code.</p><p>Following is an example outcome:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libname.so</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __assert_fail@GLIBC_2.2.5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __cxa_finalize@GLIBC_2.2.5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0000000000001307</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get_version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __gmon_start__</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0000000000001129</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> integrate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _ITM_deregisterTMCloneTable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _ITM_registerTMCloneTable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _ZNSolsEPFRSoS_E@GLIBCXX_3.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _ZSt21ios_base_library_initv@GLIBCXX_3.4.32</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _ZSt4cout@GLIBCXX_3.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4</span></span></code></pre></div><p>As the line <code>0000000000001129 T integrate</code> suggests, the function we previously defined can be referenced by the dynamic linker using the symbol name <code>integrate</code> at a specific address <code>0x1129</code> in the shared library. The exact same name will be needed by the dynamic linker of Julia, when the shared library will be dynamically linked</p><h3 id="2.-Utilizing-ccall-for-Run-time-Calls-to-Shared-Library-Functions-in-Julia" tabindex="-1">2. Utilizing <code>ccall</code> for Run-time Calls to Shared Library Functions in Julia <a class="header-anchor" href="#2.-Utilizing-ccall-for-Run-time-Calls-to-Shared-Library-Functions-in-Julia" aria-label="Permalink to &quot;2. Utilizing \`ccall\` for Run-time Calls to Shared Library Functions in Julia {#2.-Utilizing-ccall-for-Run-time-Calls-to-Shared-Library-Functions-in-Julia}&quot;">​</a></h3><p>In our Julia program, we can invoke the <code>integrate()</code> function that we have compiled and linked into the <code>libname.so</code> shared library with <a href="https://web.mit.edu/julia_v0.6.2/julia/share/doc/julia/html/en/stdlib/c.html#ccall" target="_blank" rel="noreferrer">ccall syntax</a>. Note that the use of the <code>ccall</code> is like calling a function, but it is essentially a special keyword for calling function in C-exported shared library.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># contained in autogenerated low-level API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> integrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, bins, _function)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ccall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:integrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, libname), Cdouble, (Cdouble, Cdouble, Cuint, Ptr{Cvoid}), a, b, bins, _function)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>The invokation of the <code>ccall</code> syntax specifies the shared library name and the C-exported function name that we would like to invoke. It is important to note that the function name which we specify here must be <strong>identical</strong> to what we have in the symbol table. For debugging purposes, we can also use the tool <code>nm</code> to look up the symbol table in order to make sure there is no name mangling.</p><p>Then the remaining work is to provide a decent high-level wrapper function such that the users of our Ginkgo.jl package can call this function correctly. Then the JIT compiler will handle the rest.</p><h2 id="How-about-performance?" tabindex="-1">How about performance? <a class="header-anchor" href="#How-about-performance?" aria-label="Permalink to &quot;How about performance? {#How-about-performance?}&quot;">​</a></h2><p>Regarding the concerns if overhead would be brought by adding this layer. We cite the following information from the official Julia documentation in the section <a href="https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/" target="_blank" rel="noreferrer">Calling C and Fortran code</a>.</p><blockquote><p>The machine instructions generated by Julia&#39;s JIT are the same as a native C call would be, so the resulting overhead is the same as calling a library function from C code. Non-library function calls in both C and Julia can be inlined and thus may have even less overhead than calls to shared library functions. The point above is that the cost of actually doing foreign function call is &gt;about the same as doing a call in either native language.</p></blockquote>`,20)])])}const u=a(l,[["render",h]]);export{g as __pageData,u as default};
