import{_ as i,c as a,o as t,aA as n}from"./chunks/framework.CpviZE8M.js";const g=JSON.parse('{"title":"Ginkgo C Library API","description":"","frontmatter":{},"headers":[],"relativePath":"programmer-guide/ginkgo-c-library-api.md","filePath":"programmer-guide/ginkgo-c-library-api.md","lastUpdated":null}'),e={name:"programmer-guide/ginkgo-c-library-api.md"};function l(h,s,p,k,r,d){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="Ginkgo-C-Library-API" tabindex="-1">Ginkgo C Library API <a class="header-anchor" href="#Ginkgo-C-Library-API" aria-label="Permalink to &quot;Ginkgo C Library API {#Ginkgo-C-Library-API}&quot;">​</a></h1><h2 id="C-API-Design-Principle" tabindex="-1">C API Design Principle <a class="header-anchor" href="#C-API-Design-Principle" aria-label="Permalink to &quot;C API Design Principle {#C-API-Design-Principle}&quot;">​</a></h2><p>For maintaining the consistency of our code, we propose following convections <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> when one wants to add new C language wrapper functions in <code>c_api.h</code> and <code>c_api.cpp</code>.</p><blockquote><p><strong>Prerequisite</strong></p><p>In Ginkgo C API, new functions should be orthogonal, each serving a unique purpose without overlapping others. Redundancy should be avoided, meaning new additions to C API should offer distinct functionalities, not replicate existing ones.</p></blockquote><blockquote><p><strong>Compatibility to C</strong></p><p>The <code>c_api.h</code> file should be kept compatible to C code at a level similar to C89. Its interfaces may not reference any custom data types that are only known inside of Ginkgo</p></blockquote><blockquote><p><strong>Documentation</strong></p><p>All changes should be clearly documented with <a href="https://www.doxygen.nl/" target="_blank" rel="noreferrer">Doxygen</a> style.</p></blockquote><blockquote><p><strong>Style Guide</strong></p><p>Follow <a href="https://www.doc.ic.ac.uk/lab/cplus/cstyle.html" target="_blank" rel="noreferrer">recommended C style guide</a> and when commenting, only use <a href="https://en.cppreference.com/w/c/comment#:~:text=single%20whitespace%20character.-,C%2Dstyle,content%20between%20%2F*%20and%20*%2F%20." target="_blank" rel="noreferrer">C-style comments, not C++-style</a>.</p></blockquote><blockquote><p><strong>Testing</strong></p><p>Unit tests for testing newly added entries in the C API should be provided</p></blockquote><hr><h2 id="Naming-Conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#Naming-Conventions" aria-label="Permalink to &quot;Naming Conventions {#Naming-Conventions}&quot;">​</a></h2><p>Following are some naming conventions used for the Ginkgo C API.</p><h3 id="1.-Types" tabindex="-1">1. Types <a class="header-anchor" href="#1.-Types" aria-label="Permalink to &quot;1. Types {#1.-Types}&quot;">​</a></h3><p>For consistency, following is a list of system independent types and their naming conventions that must be used in our Ginkgo C API.</p><h4 id="System-Independent-Types" tabindex="-1">System Independent Types <a class="header-anchor" href="#System-Independent-Types" aria-label="Permalink to &quot;System Independent Types {#System-Independent-Types}&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:right;">C name</th><th style="text-align:right;">Standard Julia Alias</th><th style="text-align:right;">Julia Base Type</th><th style="text-align:right;">C API name</th></tr></thead><tbody><tr><td style="text-align:right;"><code>short</code></td><td style="text-align:right;"><code>Cshort</code></td><td style="text-align:right;"><code>Int16</code></td><td style="text-align:right;"><code>i16</code></td></tr><tr><td style="text-align:right;"><code>int</code>,<code>BOOL</code>(C, typical)</td><td style="text-align:right;"><code>Cint</code></td><td style="text-align:right;"><code>Int32</code></td><td style="text-align:right;"><code>i32</code></td></tr><tr><td style="text-align:right;"><code>long long</code></td><td style="text-align:right;"><code>Clonglong</code></td><td style="text-align:right;"><code>Int64</code></td><td style="text-align:right;"><code>i64</code></td></tr><tr><td style="text-align:right;"><code>float</code></td><td style="text-align:right;"><code>Cfloat</code></td><td style="text-align:right;"><code>Float32</code></td><td style="text-align:right;"><code>f32</code></td></tr><tr><td style="text-align:right;"><code>double</code></td><td style="text-align:right;"><code>Cdouble</code></td><td style="text-align:right;"><code>Float64</code></td><td style="text-align:right;"><code>f64</code></td></tr><tr><td style="text-align:right;"><code>complex float</code></td><td style="text-align:right;"><code>ComplexF32</code></td><td style="text-align:right;"><code>Complex{Float32}</code></td><td style="text-align:right;"><code>cf32</code></td></tr><tr><td style="text-align:right;"><code>complex double</code></td><td style="text-align:right;"><code>ComplexF64</code></td><td style="text-align:right;"><code>Complex{Float64}</code></td><td style="text-align:right;"><code>cf64</code></td></tr></tbody></table><h3 id="2.-Struct-and-pointer-to-struct" tabindex="-1">2. Struct and pointer to struct <a class="header-anchor" href="#2.-Struct-and-pointer-to-struct" aria-label="Permalink to &quot;2. Struct and pointer to struct {#2.-Struct-and-pointer-to-struct}&quot;">​</a></h3><blockquote><p>If a wrapper struct is defined with <code>struct gko_executor_st;</code>, then the pointer to the wrapper struct is called <code>typedef struct gko_executor_st* gko_executor;</code></p></blockquote><h3 id="3.-Functions" tabindex="-1">3. Functions <a class="header-anchor" href="#3.-Functions" aria-label="Permalink to &quot;3. Functions {#3.-Functions}&quot;">​</a></h3><blockquote><p>Functions are named using the pattern <code>gko_classname_typename_fname</code>, for more complicated member functions like <code>gko::matrix::Csr&lt;float, int&gt;</code> that involves two template parameters for both <code>ValueType</code> and <code>IndexType</code>, we stack the templated types one after another such as for gko::matrix::Csr&lt;float, int&gt;, the entry in the C API is named as <code>gko_matrix_csr_f32_i32_st</code>.</p></blockquote><h3 id="4.-C-Template" tabindex="-1">4. C++ Template <a class="header-anchor" href="#4.-C-Template" aria-label="Permalink to &quot;4. C++ Template {#4.-C-Template}&quot;">​</a></h3><blockquote><p>In order to avoid repeating similar code for different concrete types of a specific templated class, we use macros to generate wrappers for concrete types specifically.</p></blockquote><p>In the following example, we define macros to generate wrappers using selected concrete types for a templated class and (member) functions involved.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// c_api.h</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define macros to generating declarations within the header file</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GKO_DECLARE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_ctype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_cpptype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##_st;                                         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##_st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name;              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gko_array_##_name gko_array_##_name##</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gko_executor exec_st_ptr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                 size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size);             </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gko_array_##_name gko_array_##_name##</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_create_view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(                     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gko_executor exec_st_ptr, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size, _ctype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data_ptr);          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gko_array_##_name array_st_ptr);       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_get_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gko_array_##_name array_st_ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apply the declare overload macros to declare in within the header</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DECLARE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i16)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DECLARE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DECLARE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, std::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i64)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DECLARE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DECLARE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f64)</span></span></code></pre></div><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// c_api.cpp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define macros for generating implementations within the source file</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GKO_DEFINE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_ctype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_cpptype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gko_array_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">##_name##_st {                                            </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gko</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_cpptype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr;                                              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };                                                                         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                                                               \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##_st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name;                         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                                                               \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gko_array_##_name gko_array_##_name##_create(gko_executor exec_st_ptr,     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                 size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size)                  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {                                                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##_st{                                     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            gko</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_cpptype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{exec_st_ptr-&gt;shared_ptr, size}};              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }                                                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                                                               \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gko_array_##_name gko_array_##_name##_create_view(                         </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gko_executor exec_st_ptr, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size, _ctype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data_ptr)               </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {                                                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##_st{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gko</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_array_view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(                </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            exec_st_ptr-&gt;shared_ptr, size, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_cpptype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data_ptr))}; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }                                                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                                                               \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##_delete(gko_array_##_name array_st_ptr)            </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {                                                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array_st_ptr;                                                   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }                                                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                                                               \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_array_##_name##_get_size(gko_array_##_name array_st_ptr)        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {                                                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array_st_ptr).arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();                                 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apply the define overload macros within the source file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DEFINE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i16)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DEFINE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DEFINE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i64)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DEFINE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GKO_DEFINE_ARRAY_OVERLOAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f64)</span></span></code></pre></div><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Complying with the C API programming convention from the <a href="https://docs.lammps.org/Library_add.html" target="_blank" rel="noreferrer">&quot;Extending the C API&quot;</a> section of the LAMMPS library documentation. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,27)])])}const E=i(e,[["render",l]]);export{g as __pageData,E as default};
