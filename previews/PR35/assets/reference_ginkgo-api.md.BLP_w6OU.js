import{_ as o,C as p,c as r,o as k,j as i,a,aA as n,G as t,w as l}from"./chunks/framework.CpviZE8M.js";const K=JSON.parse('{"title":"Ginkgo.jl API","description":"","frontmatter":{},"headers":[],"relativePath":"reference/ginkgo-api.md","filePath":"reference/ginkgo-api.md","lastUpdated":null}'),h={name:"reference/ginkgo-api.md"},d={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""};function z(H,s,q,$,J,W){const e=p("Badge");return k(),r("div",null,[s[124]||(s[124]=i("h1",{id:"Ginkgo.jl-API",tabindex:"-1"},[a("Ginkgo.jl API "),i("a",{class:"header-anchor",href:"#Ginkgo.jl-API","aria-label":'Permalink to "Ginkgo.jl API {#Ginkgo.jl-API}"'},"â€‹")],-1)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Ginkgo.GkoCPUExecutor",href:"#Ginkgo.GkoCPUExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoCPUExecutor")],-1)),s[1]||(s[1]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoCPUExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoExecutor</span></span></code></pre></div><p>Abstract type representing a CPU executor.</p><p>See also: <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoOMPExecutor"><code>GkoOMPExecutor</code></a>, <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoReferenceExecutor"><code>GkoReferenceExecutor</code></a></p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L46-L51",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"Ginkgo.GkoCUDAExecutor",href:"#Ginkgo.GkoCUDAExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoCUDAExecutor")],-1)),s[5]||(s[5]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoCUDAExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoGPUThreadExecutor</span></span></code></pre></div><p>Concrete executor type for CUDA execution.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L101-L105",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[8]||(s[8]=i("a",{id:"Ginkgo.GkoCsr",href:"#Ginkgo.GkoCsr"},[i("span",{class:"jlbinding"},"Ginkgo.GkoCsr")],-1)),s[9]||(s[9]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GkoCsr{Tv, Ti} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractMatrix{Tv, Ti}</span></span></code></pre></div><p>A type for representing sparse matrix and vectors in CSR format. Alias for <code>gko_matrix_csr_eltype_indextype_st</code> in C API. where <code>eltype</code> is one of the DataType[Float32, Float64] and <code>indextype</code> is one of the DataType[Int32]. For constructing a matrix, it is necessary to provide an <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoExecutor"><code>GkoExecutor</code></a>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read matrix and vector from a mtx file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoCsr{Tv, Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/A.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, exec)</span></span></code></pre></div><p><strong>External links</strong></p><ul><li><code>gko::matrix::Csr&lt;ValueType, IndexType&gt;</code> man page <a href="https://ginkgo-project.github.io/ginkgo-generated-documentation/doc/master/classgko_1_1matrix_1_1Csr.html" target="_blank" rel="noreferrer">Ginkgo</a></li></ul>`,6)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L5-L20",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[12]||(s[12]=i("a",{id:"Ginkgo.GkoDPCPPExecutor",href:"#Ginkgo.GkoDPCPPExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoDPCPPExecutor")],-1)),s[13]||(s[13]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[15]||(s[15]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoDPCPPExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoGPUItemExecutor</span></span></code></pre></div><p>Concrete executor type for DPCPP execution.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L129-L133",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[16]||(s[16]=i("a",{id:"Ginkgo.GkoDense",href:"#Ginkgo.GkoDense"},[i("span",{class:"jlbinding"},"Ginkgo.GkoDense")],-1)),s[17]||(s[17]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[19]||(s[19]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GkoDense{T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractMatrix{T}</span></span></code></pre></div><p>A type for representing dense matrix and vectors. Alias for <code>gko_matrix_dense_eltype_st</code> in C API. where <code>eltype</code> is one of the DataType[Float32, Float64]. For constructing a matrix, it is necessary to provide an <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoExecutor"><code>GkoExecutor</code></a>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating uninitialized vector of length 2, represented as a 2x1 dense matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); vec1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(undef, dim, exec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Passing dimensions as a tuple of numbers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vec2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(undef, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), exec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Passing dimensions as numbers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vec3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(undef, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, exec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating initialized dense vector or matrix via reading from a \`.mtx\` file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, exec)</span></span></code></pre></div><p><strong>External links</strong></p><ul><li><code>gko::matrix::Dense&lt;T&gt;</code> man page <a href="https://ginkgo-project.github.io/ginkgo-generated-documentation/doc/master/classgko_1_1matrix_1_1Dense.html" target="_blank" rel="noreferrer">Ginkgo</a></li></ul>`,6)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L4-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[s[20]||(s[20]=i("a",{id:"Ginkgo.GkoExecutor",href:"#Ginkgo.GkoExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoExecutor")],-1)),s[21]||(s[21]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoExecutor</span></span></code></pre></div><p>Abstract type representing a Ginkgo executor. Executors are used to specify the location for the data of linear algebra objects, and to determine where the operations will be executed. In Ginkgo.jl you can select one of the types out of - <code>[:omp, :reference, :cuda, :hip, :dpcpp]</code></p><p>Alternatively, you can also create an executor using the <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.create-Tuple{Symbol}"><code>create</code></a> method.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating an OpenMP executor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:omp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating a reference (OpenMP) executor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating an CUDA executor to run on Nvidia GPUs, using device ID 0 by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cuda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>External links</strong></p><ul><li><code>gko::Executor</code> man page <a href="https://ginkgo-project.github.io/ginkgo-generated-documentation/doc/master/classgko_1_1Executor.html" target="_blank" rel="noreferrer">Ginkgo</a></li></ul>`,7)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L4-L28",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[s[24]||(s[24]=i("a",{id:"Ginkgo.GkoGPUExecutor",href:"#Ginkgo.GkoGPUExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoGPUExecutor")],-1)),s[25]||(s[25]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoGPUExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoExecutor</span></span></code></pre></div><p>Abstract type representing a GPU executor.</p><p>See also: <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoCUDAExecutor"><code>GkoCUDAExecutor</code></a>, <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoHIPExecutor"><code>GkoHIPExecutor</code></a>, <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoDPCPPExecutor"><code>GkoDPCPPExecutor</code></a></p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[26]||(s[26]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L38-L43",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[s[28]||(s[28]=i("a",{id:"Ginkgo.GkoGPUItemExecutor",href:"#Ginkgo.GkoGPUItemExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoGPUItemExecutor")],-1)),s[29]||(s[29]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoGPUItemExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoGPUExecutor</span></span></code></pre></div><p>Abstract type representing a GPU item executor in Ginkgo.jl.</p><p>See also: <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoDPCPPExecutor"><code>GkoDPCPPExecutor</code></a></p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L64-L70",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[32]||(s[32]=i("a",{id:"Ginkgo.GkoGPUThreadExecutor",href:"#Ginkgo.GkoGPUThreadExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoGPUThreadExecutor")],-1)),s[33]||(s[33]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[35]||(s[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoGPUThreadExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoGPUExecutor</span></span></code></pre></div><p>Abstract type representing a GPU thread-based executor in Ginkgo.jl.</p><p>See also: <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoCUDAExecutor"><code>GkoCUDAExecutor</code></a>, <a href="/previews/PR35/reference/ginkgo-api#Ginkgo.GkoHIPExecutor"><code>GkoHIPExecutor</code></a></p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[34]||(s[34]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L55-L61",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[36]||(s[36]=i("a",{id:"Ginkgo.GkoHIPExecutor",href:"#Ginkgo.GkoHIPExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoHIPExecutor")],-1)),s[37]||(s[37]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[39]||(s[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoHIPExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoGPUThreadExecutor</span></span></code></pre></div><p>Concrete executor type for HIP execution.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[38]||(s[38]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L115-L119",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[40]||(s[40]=i("a",{id:"Ginkgo.GkoOMPExecutor",href:"#Ginkgo.GkoOMPExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoOMPExecutor")],-1)),s[41]||(s[41]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[43]||(s[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoOMPExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoCPUExecutor</span></span></code></pre></div><p>Concrete executor type for executor on an OpenMP-supporting device (e.g. host CPU).</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L73-L77",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",G,[i("summary",null,[s[44]||(s[44]=i("a",{id:"Ginkgo.GkoReferenceExecutor",href:"#Ginkgo.GkoReferenceExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoReferenceExecutor")],-1)),s[45]||(s[45]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[47]||(s[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoReferenceExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoCPUExecutor</span></span></code></pre></div><p>Concrete executor type for reference (CPU) execution.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[46]||(s[46]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L87-L91",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",x,[i("summary",null,[s[48]||(s[48]=i("a",{id:"Ginkgo.GkoScopedExecutor",href:"#Ginkgo.GkoScopedExecutor"},[i("span",{class:"jlbinding"},"Ginkgo.GkoScopedExecutor")],-1)),s[49]||(s[49]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[51]||(s[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GkoScopedExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoExecutor</span></span></code></pre></div><p>Executor type used generically for ScopedValue usage.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[50]||(s[50]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L143-L147",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",j,[i("summary",null,[s[52]||(s[52]=i("a",{id:"Base.fill!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, G}} where {T, G}",href:"#Base.fill!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, G}} where {T, G}"},[i("span",{class:"jlbinding"},"Base.fill!")],-1)),s[53]||(s[53]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">G</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T, G}</span></span></code></pre></div><p>Fill the given matrix for all matrix elements with the provided value <code>val</code></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[54]||(s[54]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L139-L143",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_,[i("summary",null,[s[56]||(s[56]=i("a",{id:"Base.getindex-Union{Tuple{T}, Tuple{GkoDense{T}, Integer, Integer}} where T",href:"#Base.getindex-Union{Tuple{T}, Tuple{GkoDense{T}, Integer, Integer}} where T"},[i("span",{class:"jlbinding"},"Base.getindex")],-1)),s[57]||(s[57]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span></code></pre></div><p>Obtain an element of the matrix, using Julia indexing</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[58]||(s[58]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L101-L105",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",v,[i("summary",null,[s[60]||(s[60]=i("a",{id:"Base.size-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}",href:"#Base.size-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Base.size")],-1)),s[61]||(s[61]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[63]||(s[63]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv,Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv,Ti}</span></span></code></pre></div><p>Returns the size of the sparse matrix/vector as a tuple</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[62]||(s[62]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L84-L88",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[s[64]||(s[64]=i("a",{id:"Base.size-Union{Tuple{GkoDense{T}}, Tuple{T}} where T",href:"#Base.size-Union{Tuple{GkoDense{T}}, Tuple{T}} where T"},[i("span",{class:"jlbinding"},"Base.size")],-1)),s[65]||(s[65]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span></code></pre></div><p>Returns the size of the dense matrix/vector as a tuple</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[66]||(s[66]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L151-L155",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[s[68]||(s[68]=i("a",{id:"Ginkgo.apply!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{GkoCsr{Tv, Ti}, Vararg{GkoDense{Tv}, 4}}} where {Tv, Ti}",href:"#Ginkgo.apply!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{GkoCsr{Tv, Ti}, Vararg{GkoDense{Tv}, 4}}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Ginkgo.apply!")],-1)),s[69]||(s[69]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv, Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Î±</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense{Tv}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense{Tv}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Î²</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense{Tv}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense{Tv}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv, Ti}</span></span></code></pre></div><p>Applying to Dense matrices, computes an SPMV product. x = Î±_A_b + Î²*x.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[70]||(s[70]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L164-L168",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[s[72]||(s[72]=i("a",{id:"Ginkgo.colvals-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}",href:"#Ginkgo.colvals-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Ginkgo.colvals")],-1)),s[73]||(s[73]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[75]||(s[75]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">colvals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv,Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv,Ti}</span></span></code></pre></div><p>Returns the column indexes of the matrix.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[74]||(s[74]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L122-L126",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",P,[i("summary",null,[s[76]||(s[76]=i("a",{id:"Ginkgo.create-Tuple{Symbol}",href:"#Ginkgo.create-Tuple{Symbol}"},[i("span",{class:"jlbinding"},"Ginkgo.create")],-1)),s[77]||(s[77]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[79]||(s[79]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(executor_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creation of the executor of a specified executor type.</p><p><strong>Parameters</strong></p><ul><li><code>executor_type::Symbol</code>: One of the executor types to create out of supported executor types [:omp, :reference, :cuda, :hip, :dpcpp]</li></ul>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[78]||(s[78]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L164-L171",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",S,[i("summary",null,[s[80]||(s[80]=i("a",{id:"Ginkgo.elements-Union{Tuple{GkoDense{T}}, Tuple{T}} where T",href:"#Ginkgo.elements-Union{Tuple{GkoDense{T}}, Tuple{T}} where T"},[i("span",{class:"jlbinding"},"Ginkgo.elements")],-1)),s[81]||(s[81]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span></code></pre></div><p>Get number of stored elements of the matrix</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[82]||(s[82]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L162-L166",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",w,[i("summary",null,[s[84]||(s[84]=i("a",{id:"Ginkgo.get_nnz-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}",href:"#Ginkgo.get_nnz-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Ginkgo.get_nnz")],-1)),s[85]||(s[85]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[87]||(s[87]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_nnz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv,Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv,Ti}</span></span></code></pre></div><p>Get number of stored elements of the matrix</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[86]||(s[86]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L95-L99",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",B,[i("summary",null,[s[88]||(s[88]=i("a",{id:"Ginkgo.mmwrite-Union{Tuple{Ti}, Tuple{Tv}, Tuple{String, GkoCsr{Tv, Ti}}} where {Tv, Ti}",href:"#Ginkgo.mmwrite-Union{Tuple{Ti}, Tuple{Tv}, Tuple{String, GkoCsr{Tv, Ti}}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Ginkgo.mmwrite")],-1)),s[89]||(s[89]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[91]||(s[91]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mmwrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv,Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv, Ti}</span></span></code></pre></div><p>Writing <code>mat::GkoCsr{Tv,Ti}</code> into a matrix market file. The filename should be in form as &quot;name.mtx&quot;</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[90]||(s[90]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L72-L76",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",I,[i("summary",null,[s[92]||(s[92]=i("a",{id:"Ginkgo.nonzeros-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}",href:"#Ginkgo.nonzeros-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Ginkgo.nonzeros")],-1)),s[93]||(s[93]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nonzeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv,Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv,Ti}</span></span></code></pre></div><p>Returns the non-zero values of the matrix.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[94]||(s[94]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L134-L138",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",V,[i("summary",null,[s[96]||(s[96]=i("a",{id:"Ginkgo.norm1!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, GkoDense{G}}} where {T, G}",href:"#Ginkgo.norm1!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, GkoDense{G}}} where {T, G}"},[i("span",{class:"jlbinding"},"Ginkgo.norm1!")],-1)),s[97]||(s[97]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[99]||(s[99]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">norm1!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the column-wise Euclidian (LÂ¹) norm of this matrix.</p><p><strong>External links</strong></p><ul><li><code>void gko::matrix::Dense&lt; ValueType &gt;::compute_norm1</code> man page <a href="https://ginkgo-project.github.io/ginkgo-generated-documentation/doc/master/classgko_1_1matrix_1_1Dense.html#a11c59175fcc040d99afe3acb39cbcb3e.html" target="_blank" rel="noreferrer">Ginkgo</a></li></ul>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[98]||(s[98]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L174-L181",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",U,[i("summary",null,[s[100]||(s[100]=i("a",{id:"Ginkgo.norm2!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, GkoDense{G}}} where {T, G}",href:"#Ginkgo.norm2!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, GkoDense{G}}} where {T, G}"},[i("span",{class:"jlbinding"},"Ginkgo.norm2!")],-1)),s[101]||(s[101]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[103]||(s[103]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">norm2!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoDense{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the column-wise Euclidian (LÂ²) norm of this matrix.</p><p><strong>External links</strong></p><ul><li><code>void gko::matrix::Dense&lt; ValueType &gt;::compute_norm2</code> man page <a href="https://ginkgo-project.github.io/ginkgo-generated-documentation/doc/master/classgko_1_1matrix_1_1Dense.html#a19b9e51fd9922bab9637e42ab7209b8c.html" target="_blank" rel="noreferrer">Ginkgo</a></li></ul>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[102]||(s[102]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L187-L194",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",L,[i("summary",null,[s[104]||(s[104]=i("a",{id:"Ginkgo.number",href:"#Ginkgo.number"},[i("span",{class:"jlbinding"},"Ginkgo.number")],-1)),s[105]||(s[105]=a()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[107]||(s[107]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, exec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoExecutor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXECUTOR[])</span></span></code></pre></div><p>Initialize a 1x1 matrix representing a number with the provided value <code>val</code></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[106]||(s[106]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Dense.jl#L111-L115",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",R,[i("summary",null,[s[108]||(s[108]=i("a",{id:"Ginkgo.rowptr-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}",href:"#Ginkgo.rowptr-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Ginkgo.rowptr")],-1)),s[109]||(s[109]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[111]||(s[111]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rowptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv,Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv,Ti}</span></span></code></pre></div><p>Returns the row pointers of the matrix.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[110]||(s[110]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L106-L110",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",O,[i("summary",null,[s[112]||(s[112]=i("a",{id:"Ginkgo.srows-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}",href:"#Ginkgo.srows-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"},[i("span",{class:"jlbinding"},"Ginkgo.srows")],-1)),s[113]||(s[113]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[115]||(s[115]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">srows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoCsr{Tv,Ti}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tv,Ti}</span></span></code></pre></div><p>Returns the number of the srow stored elements (involved warps)</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[114]||(s[114]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/matrix/Csr.jl#L152-L156",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",M,[i("summary",null,[s[116]||(s[116]=i("a",{id:"Ginkgo.synchronize",href:"#Ginkgo.synchronize"},[i("span",{class:"jlbinding"},"Ginkgo.synchronize")],-1)),s[117]||(s[117]=a()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[119]||(s[119]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(executor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GkoExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Synchronize the given executor. This function blocks until all operations associated with the executor are complete.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[118]||(s[118]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/base/Executor.jl#L190-L194",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",N,[i("summary",null,[s[120]||(s[120]=i("a",{id:"Ginkgo.version-Tuple{}",href:"#Ginkgo.version-Tuple{}"},[i("span",{class:"jlbinding"},"Ginkgo.version")],-1)),s[121]||(s[121]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[123]||(s[123]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Obtain the version information and the supported modules of the underlying Ginkgo library.</p><p><strong>External links</strong></p><ul><li><code>gko::version_info::get()</code> man page <a href="https://ginkgo-project.github.io/ginkgo-generated-documentation/doc/master/classgko_1_1version__info.html" target="_blank" rel="noreferrer">Ginkgo</a></li></ul>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[122]||(s[122]=[i("a",{href:"https://github.com/youwuyou/Ginkgo.jl/blob/b74b6684cfaed3a1e954d22a5a7d68b8fc77fac9/src/Configurations.jl#L1-L8",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const Q=o(h,[["render",z]]);export{K as __pageData,Q as default};
