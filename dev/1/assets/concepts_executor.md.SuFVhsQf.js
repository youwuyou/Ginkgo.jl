import{_ as i,c as t,o as a,aA as e}from"./chunks/framework.CaJIaaab.js";const c=JSON.parse('{"title":"Executor","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/executor.md","filePath":"concepts/executor.md","lastUpdated":null}'),l={name:"concepts/executor.md"};function n(h,s,p,r,o,k){return a(),t("div",null,[...s[0]||(s[0]=[e(`<h1 id="Executor" tabindex="-1">Executor <a class="header-anchor" href="#Executor" aria-label="Permalink to &quot;Executor {#Executor}&quot;">​</a></h1><p>Executors are used to specify the data location of linear algebra objects, and to determine where the operations on that data shall be performed. Currently, <a href="https://github.com/ginkgo-project/ginkgo" target="_blank" rel="noreferrer">ginkgo</a> supports various backends including OpenMP, CUDA, HIP and SYCL. In <code>Ginkgo.jl</code>, we are gradually working on testing out and porting all of them.</p><table tabindex="0"><thead><tr><th style="text-align:right;">Executor type</th><th style="text-align:right;">Description</th><th style="text-align:right;">Implemented in Ginkgo.jl</th></tr></thead><tbody><tr><td style="text-align:right;"><code>GkoExecutor(:omp)</code></td><td style="text-align:right;">specifies that the data should be stored and the associated operations executed on an OpenMP-supporting device (e.g. host CPU)</td><td style="text-align:right;">✓</td></tr><tr><td style="text-align:right;"><code>GkoExecutor(:cuda)</code></td><td style="text-align:right;">specifies that the data should be stored and the operations executed on the NVIDIA GPU accelerator</td><td style="text-align:right;">✓</td></tr><tr><td style="text-align:right;"><code>GkoExecutor(:hip)</code></td><td style="text-align:right;">uses the HIP library to compile code for either NVIDIA or AMD GPU accelerator</td><td style="text-align:right;"></td></tr><tr><td style="text-align:right;"><code>GkoExecutor(:sycl)</code></td><td style="text-align:right;">uses the SYCL compiler for any SYCL supported hardware (e.g. Intel CPUs, GPU, FPGAs, ...)</td><td style="text-align:right;"></td></tr><tr><td style="text-align:right;"><code>GkoExecutor(:refrence)</code></td><td style="text-align:right;">executes a non-optimized reference implementation, which can be used to debug the library.</td><td style="text-align:right;">✓</td></tr></tbody></table><h2 id="Usage" tabindex="-1">Usage <a class="header-anchor" href="#Usage" aria-label="Permalink to &quot;Usage {#Usage}&quot;">​</a></h2><p>In <code>Ginkgo.jl</code>, we allow both passing the executor explicitly or implicitly.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>Please do not mix these two use cases to avoid any confusion. You shall adapt to either the explicit or the implicit usage for a single program, but not a mixed-style usage. See this <a href="https://github.com/youwuyou/Ginkgo.jl/pull/20" target="_blank" rel="noreferrer">pull request</a> in you want to know more in detail.</p></div><h3 id="1.-Explicit-executor-usage" tabindex="-1">1. Explicit executor usage <a class="header-anchor" href="#1.-Explicit-executor-usage" aria-label="Permalink to &quot;1. Explicit executor usage {#1.-Explicit-executor-usage}&quot;">​</a></h3><p>Identical to the original usage as in <a href="https://github.com/ginkgo-project/ginkgo" target="_blank" rel="noreferrer">ginkgo</a>, we need to provide an executor for initialization of linear algebra objects and solver routines etc. explicitly.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creates executor for a specific backend</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:omp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read matrix and vector from mtk files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoCsr{Float32, Int32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/A.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, exec)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/b.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, exec)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/x0.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, exec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Passing the executor to the CG solver</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cg!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, A, b, exec; maxiter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reduction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0e-7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Example</p><p><a href="https://github.com/youwuyou/Ginkgo.jl/blob/main/examples/simple-solver/simple-solver-explicit-executor.jl" target="_blank" rel="noreferrer">simple-solver-explicit-executor.jl</a></p></div><h3 id="2.-Implicit-executor-usage" tabindex="-1">2. Implicit executor usage <a class="header-anchor" href="#2.-Implicit-executor-usage" aria-label="Permalink to &quot;2. Implicit executor usage {#2.-Implicit-executor-usage}&quot;">​</a></h3><p>The implicit passing of the executor is enabled by using <a href="https://github.com/vchuravy/ScopedValues.jl" target="_blank" rel="noreferrer"><code>ScopedValues.jl</code></a>. We declared <code>EXECUTOR</code> to be a dynamically scoped variable in our package, and initialized it with a dummy value which just acts as a placeholder.</p><p>Within the dynamic scope, we specify the concrete executor that we refer to using the <code>EXECUTOR =&gt; exec</code> <a href="https://github.com/youwuyou/Ginkgo.jl/pull/20#issue-2035576204" target="_blank" rel="noreferrer">syntax</a>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creates executor for a specific backend</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:omp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify executor to be passed for matrix creation and cg solver</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EXECUTOR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exec) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Read matrix and vector from mtk files, now omit the passing of exec</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoCsr{Float32, Int32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/A.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/b.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GkoDense{Float32}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/x0.mtx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  cg!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, A, b; maxiter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reduction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0e-7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Example</p><p><a href="https://github.com/youwuyou/Ginkgo.jl/blob/main/examples/simple-solver/simple-solver-implicit-executor.jl" target="_blank" rel="noreferrer">simple-solver-implicit-executor.jl</a></p></div>`,15)])])}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
