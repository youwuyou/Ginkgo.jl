import{_ as o,c as i,o as n,aA as l}from"./chunks/framework.DC664-AI.js";const G=JSON.parse('{"title":"Index","description":"","frontmatter":{},"headers":[],"relativePath":"reindex.md","filePath":"reindex.md","lastUpdated":null}'),r={name:"reindex.md"};function a(d,e,T,g,k,c){return n(),i("div",null,[...e[0]||(e[0]=[l('<h1 id="Index" tabindex="-1">Index <a class="header-anchor" href="#Index" aria-label="Permalink to &quot;Index {#Index}&quot;">â€‹</a></h1><ul><li><a href="#Ginkgo.API.gko_dim2_st"><code>Ginkgo.API.gko_dim2_st</code></a></li><li><a href="#Ginkgo.API.gko_executor"><code>Ginkgo.API.gko_executor</code></a></li><li><a href="#Ginkgo.API.gko_executor_st"><code>Ginkgo.API.gko_executor_st</code></a></li><li><a href="#Ginkgo.GkoCsr"><code>Ginkgo.GkoCsr</code></a></li><li><a href="#Ginkgo.GkoDense"><code>Ginkgo.GkoDense</code></a></li><li><a href="#Ginkgo.GkoExecutor"><code>Ginkgo.GkoExecutor</code></a></li><li><a href="#Base.fill!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, G}} where {T, G}"><code>Base.fill!</code></a></li><li><a href="#Base.getindex-Union{Tuple{T}, Tuple{GkoDense{T}, Integer, Integer}} where T"><code>Base.getindex</code></a></li><li><a href="#Base.size-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"><code>Base.size</code></a></li><li><a href="#Base.size-Union{Tuple{GkoDense{T}}, Tuple{T}} where T"><code>Base.size</code></a></li><li><a href="#Ginkgo.API.ginkgo_dim2_cols_get-Tuple{Any}"><code>Ginkgo.API.ginkgo_dim2_cols_get</code></a></li><li><a href="#Ginkgo.API.ginkgo_dim2_create-Tuple{Any, Any}"><code>Ginkgo.API.ginkgo_dim2_create</code></a></li><li><a href="#Ginkgo.API.ginkgo_dim2_rows_get-Tuple{Any}"><code>Ginkgo.API.ginkgo_dim2_rows_get</code></a></li><li><a href="#Ginkgo.API.ginkgo_executor_delete-Tuple{Any}"><code>Ginkgo.API.ginkgo_executor_delete</code></a></li><li><a href="#Ginkgo.API.ginkgo_matrix_csr_f32_i32_apply-NTuple{5, Any}"><code>Ginkgo.API.ginkgo_matrix_csr_f32_i32_apply</code></a></li><li><a href="#Ginkgo.API.ginkgo_version_get-Tuple{}"><code>Ginkgo.API.ginkgo_version_get</code></a></li><li><a href="#Ginkgo.create-Tuple{Symbol}"><code>Ginkgo.create</code></a></li><li><a href="#Ginkgo.elements-Union{Tuple{GkoDense{T}}, Tuple{T}} where T"><code>Ginkgo.elements</code></a></li><li><a href="#Ginkgo.mtx_buffer_str-Union{Tuple{GkoDense{T}}, Tuple{T}} where T"><code>Ginkgo.mtx_buffer_str</code></a></li><li><a href="#Ginkgo.nnz-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"><code>Ginkgo.nnz</code></a></li><li><a href="#Ginkgo.norm1!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, GkoDense{G}}} where {T, G}"><code>Ginkgo.norm1!</code></a></li><li><a href="#Ginkgo.norm2!-Union{Tuple{G}, Tuple{T}, Tuple{GkoDense{T}, GkoDense{G}}} where {T, G}"><code>Ginkgo.norm2!</code></a></li><li><a href="#Ginkgo.number"><code>Ginkgo.number</code></a></li><li><a href="#Ginkgo.spmm!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{GkoCsr{Tv, Ti}, Vararg{GkoDense{Tv}, 4}}} where {Tv, Ti}"><code>Ginkgo.spmm!</code></a></li><li><a href="#Ginkgo.srows-Union{Tuple{GkoCsr{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}"><code>Ginkgo.srows</code></a></li><li><a href="#Ginkgo.version-Tuple{}"><code>Ginkgo.version</code></a></li></ul>',2)])])}const t=o(r,[["render",a]]);export{G as __pageData,t as default};
