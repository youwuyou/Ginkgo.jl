import{_ as s,c as a,o as n,aA as e}from"./chunks/framework.CaJIaaab.js";const o=JSON.parse('{"title":"Debugging Tipps","description":"","frontmatter":{},"headers":[],"relativePath":"programmer-guide/debugging.md","filePath":"programmer-guide/debugging.md","lastUpdated":null}'),l={name:"programmer-guide/debugging.md"};function t(p,i,h,k,r,g){return n(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="Debugging-Tipps" tabindex="-1">Debugging Tipps <a class="header-anchor" href="#Debugging-Tipps" aria-label="Permalink to &quot;Debugging Tipps {#Debugging-Tipps}&quot;">​</a></h1><p>Debugging could be confusing especially when interoperating across different languages. Thus, we utilize the following tools for our development process that can largely reveal some hidden information.</p><ul><li><p><code>gdb</code> for low-level wrapper in C</p></li><li><p><code>Debugger.jl</code> for high-level wrapper within Julia</p></li></ul><h2 id="Calling-lower-level-wrapper-functions-in-C" tabindex="-1">Calling lower-level wrapper functions in C <a class="header-anchor" href="#Calling-lower-level-wrapper-functions-in-C" aria-label="Permalink to &quot;Calling lower-level wrapper functions in C {#Calling-lower-level-wrapper-functions-in-C}&quot;">​</a></h2><p>It is sometimes desirable to be able to call the lower-level functions directly in C. In order to do this, wee need to correctly link against the compiled debug mode Ginkgo dynamic library called <code>libginkgod</code> when using <code>gcc</code>.</p><p>Followingly is an example program where we accessed the underlying Ginkgo library through the implemented C API, resided within the <a href="https://github.com/ginkgo-project/ginkgo" target="_blank" rel="noreferrer">Ginkgo library</a> that we have cloned locally from Github.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//play_field.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/path/to/ginkgo/include/ginkgo/c_api.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ginkgo_version_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // create an executor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gko_executor exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ginkgo_executor_omp_create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // create an dimensional object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gko_dim2_st size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ginkgo_dim2_create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // create a dense matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gko_matrix_dense_f32 mat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ginkgo_matrix_dense_f32_create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exec, size);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // printf() displays the string inside quotation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Number of stored elements: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%zu\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ginkgo_matrix_dense_f32_get_num_stored_elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mat));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For the compilation process, this <code>play_field.c</code> file needs to be linked properly using the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> play_field</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> play_field.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L/path/to/ginkgo/build/lib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lginkgod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Wl,-rpath=/path/to/ginkgo/build/lib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lginkgo_ompd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lginkgo_cudad</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lginkgo_referenced</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lginkgo_hipd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lginkgo_dpcppd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lginkgo_deviced</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/lib/libhwloc.so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/lib/libmpi_cxx.so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/lib/libmpi.so</span></span></code></pre></div><p>This is also helpful for verifying that the <code>gcc</code> compiler can properly proceed with our implemented C API.</p>`,10)])])}const c=s(l,[["render",t]]);export{o as __pageData,c as default};
